Welcome to FormAlchemy's documentation!
=======================================

.. seealso::

    If you use the trunk you may look at a more up to date version
    of the documentation at `http://docs.formalchemy.org/current/
    <http://docs.formalchemy.org/current/>`_.

FormAlchemy eliminates boilerplate by autogenerating HTML input fields from a
given SQLAlchemy model. FormAlchemy will try to figure out what kind of HTML
code should be returned by introspecting the model's properties and generate
ready-to-use HTML code that will fit the developer's application.

Of course, FormAlchemy can't figure out everything, i.e, the developer might
want to display only a few columns from the given model. Thus, FormAlchemy is
also highly customizable: which Fields are displayed, in which order, adding
some custom fields, and writing a custom template to output your form using
HTML tables, dd/dt, or lists.


Getting started
===============

To get started, you only need to know about two classes, ``FieldSet`` and ``Grid``, and a handful of methods:

    * ``render``: returns a string containing the HTML
    * ``validate``: True if the form passes its validations; otherwise, False
    * ``sync``: syncs the model instance that was bound to the input data 

This introduction illustrates these three methods. For full details on customizing ``FieldSet`` behavior, see the :ref:`table of contents <toc-label>` below.

We'll start with two simple SQLAlchemy models with a one-to-many relationship (each ``User`` can have many ``Order``-s), and fetch an ``Order`` object to edit:

  >>> from formalchemy.tests import Session, User, Order, request
  >>> session = Session()
  >>> order1 = session.query(Order).first()

Now, let's render a form to edit the order we've loaded.

  >>> from formalchemy import FieldSet, Grid
  >>> fs = FieldSet(order1)
  >>> print fs.render()  #doctest: +SKIP

This results in the following form elements:

.. image:: example.png

Note how the options for the User input were automatically loaded from the database. ``str()`` is used on the ``User`` objects to get the option descriptions.

To edit a new object, bind your ``FieldSet`` to the class rather than a specific instance:

  >>> fs = FieldSet(Order)

To edit multiple objects, bind them to a Grid instead:

  >>> orders = session.query(Order).all()
  >>> g = Grid(Order, orders)
  >>> print g.render()  #doctest: +SKIP

Which results in:

.. image:: example-grid.png

Saving changes is similarly easy. (Here we're using Pylons-style `request.params`; adjust for your framework of choice as necessary):

  >>> fs = FieldSet(order1, data=request.params)
  >>> if fs.validate():
  ...    fs.sync()
  ...    session.commit()  #doctest: +SKIP

`Grid` works the same way. 


For more examples, see :doc:`examples.txt`.


.. _toc-label:

Modules contents
==================

.. toctree::
   :maxdepth: 2
   :glob:

   fields
   forms
   tables
   validators
   internationalisation
   config
   templates
   customisation
   formalchemy
   pylons_sample
   ext/*


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


Changes
=======

##
##.. sidebar:: Testing 1 2 3
##   :subtitle: Testing encore sous-titre
##
##   * Meilleurs choses
##   * Ici et ailleurs
##   * Sans tomber
##      * Dans l'eau
##

.. include:: ../CHANGELOG.txt

Copyright and License
=====================

.. include:: ../COPYRIGHT.txt
