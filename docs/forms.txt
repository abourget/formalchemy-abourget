:mod:`formalchemy.forms` -- `FieldSet`: Form generation
*******************************************************

.. Commented imports

   >>> from formalchemy.tests import *

.. automodule:: formalchemy.forms

Configuring and rendering forms
===============================

In FormAlchemy, forms are rendered using the `FieldSet` object.

There are several operations that can be made on a FieldSet. They can be `bound`, `configured`, `validated`, and `sync'd`.

* `Binding` attaches a model object to the `FieldSet`.
* `Configuration` tells the `FieldSet` which fields to include, in which order, etc.
* `Validation` checks the form-submitted parameters for correctness against the FieldSet's validators and field definitions.
* `Synchronization` fills the model object with values taken from the web form submission.


Binding
-------

Binding occurs at first on :class:`FieldSet` object creation.

The :class:`~formalchemy.forms.FieldSet` object constructor takes it's parameters and calls it's base class's constructor (:meth:`ModelRenderer.__init__`). It looks like:

.. automethod:: formalchemy.base.ModelRenderer.__init__


Fields
------

Each :class:`~formalchemy.forms.FieldSet` will have a :mod:`Field
<formalchemy.fields>` created for each attribute of the bound model.
Additional :mod:`Field <formalchemy.fields>`s may be added manually; see below.
A :mod:`Field <formalchemy.fields>` knows how to render itself, and most
customization is done by telling a :mod:`Field <formalchemy.fields>` to modify
itself appropriately.

:mod:`Field <formalchemy.fields>`-s are accessed simply as attributes of the
:class:`~formalchemy.forms.FieldSet`::

  >>> fs = FieldSet(bill)
  >>> print fs.name.value
  Bill

If you have an attribute name that conflicts with a built-in
:class:`~formalchemy.forms.FieldSet` attribute, you can use `fs[fieldname]`
instead. So these are equivalent::

  >>> fs.name == fs['name']
  True

.. _field-modification:

Field Modification
------------------
  
:mod:`Field <formalchemy.fields>` rendering can be modified with methods called on the Field object. See :doc:`fields` for full documentation.


Adding Fields
-------------

You can add additional fields not in your SQLAlchemy model with the `add` 
method, which takes a :mod:`Field <formalchemy.fields>` object as parameter.

Here is `Field`'s constructor:

.. automethod:: formalchemy.fields.Field.__init__

Fields can be modified and tweaked as needed. See :doc:`fields` for documentation.


Fields to render
----------------
  
The `configure` method specifies a set of attributes to be rendered.  By
default, all attributes are rendered except primary keys and foreign keys.
But, relations **based on** foreign keys **will** be rendered.  For example, if
an `Order` has a `user_id` FK and a `user` relation based on it, `user` will be
rendered (as a select box of `User`'s, by default) but `user_id` will not.

See parameters in :meth:`AbstractFieldSet.configure`.

Examples: given a :class:`~formalchemy.forms.FieldSet` `fs` bound to a `User`
instance as a model with primary key `id` and attributes `name` and `email`,
and a relation `orders` of related Order objects, the default will be to render
`name`, `email`, and `orders`. To render the orders list as checkboxes instead
of a select, you could specify::

  >>> fs2 = fs.bind(bill)
  >>> fs2.configure(options=[fs.orders.checkbox()]) 

To render only name and email::

  >>> fs2 = fs.bind(bill)
  >>> fs2.configure(include=[fs.name, fs.email]) 

or::

  >>> fs2 = fs.bind(bill)
  >>> fs2.configure(exclude=[fs.orders]) 

Note that you need to call bind()

You can also include modifications to a field in the `include`
parameter, such as here, to render name and options-as-checkboxes::
  
  >>> fs2 = fs.bind(bill)
  >>> fs2.configure(include=[fs.name, fs.orders.checkbox()]) 

See :ref:`below <customizing>` how to customize your forms.


Rendering
---------

Once you've configured your :class:`~formalchemy.forms.FieldSet`,
just call the `render` method to get an HTML string suitable for
including in your page::

    >>> fs = FieldSet(bill)
    >>> print fs.render() 
    <div>
     <label class="field_req" for="User-1-email">
      Email
     </label>
     <input id="User-1-email" maxlength="40" name="User-1-email" type="text" value="bill@example.com" />
    </div>
    <script type="text/javascript">
     //<![CDATA[
    document.getElementById("User-1-email").focus();
    //]]>
    </script>
    <div>
     <label class="field_req" for="User-1-password">
      Password
     </label>
     <input id="User-1-password" maxlength="20" name="User-1-password" type="text" value="1234" />
    </div>
    <div>
     <label class="field_opt" for="User-1-name">
      Name
     </label>
     <input id="User-1-name" maxlength="30" name="User-1-name" type="text" value="Bill" />
    </div>
    <div>
     <label class="field_opt" for="User-1-orders">
      Orders
     </label>
     <select id="User-1-orders" multiple="multiple" name="User-1-orders" size="5">
      <option value="2">
       Quantity: 5
      </option>
      <option value="3">
       Quantity: 6
      </option>
      <option value="1" selected="selected">
       Quantity: 10
      </option>
     </select>
    </div>

Note that there is no `form` element!  You must provide that yourself.

You can also render individual fields for more fine-grained control::

  >>> fs = FieldSet(bill)
  >>> print fs.name.render()
  <input id="User-1-name" maxlength="30" name="User-1-name" type="text" value="Bill" />


.. _customizing::

Custom FieldSet
===============

You can customize your FieldSet, and create a ready-made derived version
for when you need it in your application. For example, you could create
one FieldSet per model object in your application.

In this example, we create a FieldSet to edit the `User` model object:

.. literalinclude:: ../formalchemy/tests/__init__.py
   :pyobject: UserFieldSet

Then you could use it in your framework controllers as::

  >>> post_data = [('User--passwd1', 'pass'), ('User--passwd2', 'pass'),
  ...              ('User--name', 'blah'), ('User--email', 'blah@example.com')]
  >>> fs = UserFieldSet().bind(User, data=post_data or None)
  >>> if post_data and fs.validate():
  ...     fs.sync()
  ...     fs.model.password = fs.passwd1.value

where post_data would (in Pylons) be something like `request.POST`.

It's also possible to remove a `Field` from a `FieldSet`, e.g. when you want
to disallow a user to modify a field, based on certain conditions:

  >>> del fs.passwd1
  >>> del fs.passwd2

This will display a `FieldSet` without those two fields.

If you want to make on field read-only (based on permissions for example),
you can modify a Field in place using the `modify()` method::

  >>> fs.modify(fs.email.readonly())
  <UserFieldSet (configured) with ['name', 'email']>

You can also use the new ``set()`` method that changes settings *in-place*:

  >>> fs.email.set(readonly=True)
  <UserFieldSet (configured) with ['name', 'email']>
  >>> fs.email.is_readonly()
  True

Including data from more than one class
=======================================

`FormAlchemy` only supports binding to a single class, but a single class can itself
include data from multiple tables.  Example::

  >>> class Order__User(Base):
  ...     __table__ = join(Order.__table__, User.__table__).alias('__orders__users')

Such a class can then be used normally in a :class:`~formalchemy.forms.FieldSet`.

See http://www.sqlalchemy.org/docs/05/mappers.html#advdatamapping_mapper_joins
for full details on mapping multiple tables to a single class.


Non-SQLAlchemy forms
====================

You can create a :class:`~formalchemy.forms.FieldSet` from non-SQLAlchemy, new-style (inheriting
from `object`) classes, like this::

  >>> class Manual(object):
  ...     a = Field()
  ...     b = Field(type=types.Integer).dropdown([('one', 1), ('two', 2)])

  >>> fs = FieldSet(Manual)

:mod:`Field <formalchemy.fields>` declaration is the same as for adding fields
to a SQLAlchemy-based :class:`~formalchemy.forms.FieldSet`, except that you do
not give the Field a name (the attribute name is used).

You can still validate and sync a non-SQLAlchemy class instance, but
obviously persisting any data post-sync is up to you.


A note on Sessions
==================

`FormAlchemy` can save you the most time if you use 
contextual Sessions: 
http://www.sqlalchemy.org/docs/05/session.html#contextual-thread-local-sessions.
Otherwise, you will have to manually pass Session objects when you bind
:class:`~formalchemy.forms.FieldSet` and :class:`~formalchemy.tables.Grid`
instances to your data.



Advanced Customization: Form Templates
======================================

There are three parts you can customize in a `FieldSet` subclass short
of writing your own render method.  These are `default_renderers`, and `prettify`.
As in::

    >>> from formalchemy import renderers
    >>> def myprettify(value):
    ...     return value

    >>> def myrender(**kwargs):
    ...     return template % kwargs

    >>> class MyFieldSet(FieldSet):
    ...     default_renderers = {
    ...         types.String: renderers.TextFieldRenderer,
    ...         types.Integer: renderers.IntegerFieldRenderer,
    ...         # ...
    ...     }
    ...     prettify = staticmethod(myprettify)
    ...     _render = staticmethod(myrender)

`default_renderers` is a dict of callables returning a FieldRenderer.  Usually these
will be FieldRenderer subclasses, but this is not required.  For instance,
to make Booleans render as select fields with Yes/No options by default,
you could write::

    >>> class BooleanSelectRenderer(renderers.SelectFieldRenderer):
    ...     def render(self, **kwargs):
    ...         kwargs['options'] = [('Yes', True), ('No', False)]
    ...         return renderers.SelectFieldRenderer.render(self, **kwargs)

    >>> FieldSet.default_renderers[types.Boolean] = BooleanSelectRenderer

`prettify` is a function that, given an attribute name ('user_name')
turns it into something usable as an HTML label ('User name').

`_render` should be a template rendering method, such as `Template.render` from
a mako Template or `Template.substitute` from a Tempita Template.


`_render` should take as parameters:

- `fieldset`
      the :class:`~formalchemy.forms.FieldSet` object to render

Your template will be particularly interested in these
:class:`~formalchemy.forms.FieldSet` attributes:

- `render_fields`:
      the list of fields the user has configured for rendering

- `errors`: 
      a dictionary of validation failures, keyed on field.  `errors[None]` are
      errors applying to the form as a whole rather than a specific field.

- `prettify`: 
      as above

- `focus`: 
      the field to focus

You can also override `prettify` and `_render` on a
per-:class:`~formalchemy.forms.FieldSet` basis::
    
  fs = FieldSet(...)
  fs.prettify = myprettify
  fs._render = ...

The default template is `formalchemy.forms.template_text_tempita`.


Really advanced customization
=============================

You can derive your own subclasses from :class:`~formalchemy.forms.FieldSet` or
:class:`~formalchemy.forms.AbstractFieldSet` to provide a customized `render`
and/or `configure`.

`AbstractFieldSet` encorporates validation/errors logic and provides a default
`configure` method.  It does _not_ provide `render`.

You can write `render` by manually sticking strings together if that's
what you want, but we recommend using a templating package for clarity
and maintainability.  `FormAlchemy` includes the Tempita templating
package as formalchemy.tempita; see http://pythonpaste.org/tempita/
for documentation.
    
`formalchemy.forms.template_text_tempita` is the default template used
by `FieldSet.` We recommend looking at that to get started.
`FormAlchemy` also includes a Mako version,
`formalchemy.forms.template_text_mako`, and will use that instead if
Mako is available.  The rendered HTML is identical but Mako
should be faster.

Classes definitions
===================

AbstractFieldSet
----------------

.. autoclass:: formalchemy.forms.AbstractFieldSet
   :members:

FieldSet
--------

.. autoclass:: formalchemy.forms.FieldSet
   :members:


ModelRenderer
-------------

.. autoclass:: formalchemy.base.ModelRenderer
   :members:
